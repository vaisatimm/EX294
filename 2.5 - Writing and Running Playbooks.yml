Example of a task inside a playbook:

--- 
- name: Configure important user consistentely
  host: servera.lab.example.com
  task: 
    - name: Newbie exists with UID 4000
      ansible.builtin.user: 
        name: newbie 
        uid: 4000
        state: present 

IMPORTANT: modules comes from collections, and the collections are installed inside: 

/usr/share/ansible/collections/ansible_collections/redhat

IMPORTANT: collections are inside the EEI, execution environment image. 

To see all the collections inside the EE: 

$ ansible-navigator collections list    #collection inside the execution environment

Remember that ansible-navigator command transacts against the execution environment that you've set inside of 
your ansible-navigator.yaml configuration file. 

In playbook, the yaml is made of tasks, that are a list, which is denotated with "-"
EXAMPLE: 
https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html#examples

- name: Add the user 'johnd' with a specific uid and a primary group of 'admin'
  ansible.builtin.user:
    name: johnd
    comment: John Doe
    uid: 1040
    group: admin

- name: Create a user 'johnd' with a home directory
  ansible.builtin.user:
    name: johnd
    create_home: yes

- name: Add the user 'james' with a bash shell, appending the group 'admins' and 'developers' to the user's groups
  ansible.builtin.user:
    name: james
    shell: /bin/bash
    groups: admins,developers
    append: yes

- name: Remove the user 'johnd'
  ansible.builtin.user:
    name: johnd
    state: absent
    remove: yes

[...] #CONTINUES AT THE LINK 

You do not need to encapsulate the names of tasks inside duoble quotes. 

The module name is always implemented as a dictionary (e.g. "ansible.builtin.user:"), 
and all the options of that module are implemented as key-value pairs

e.g.: 

    name: johnd
    state: absent
    remove: yes

To see the docs related to a module: 

$ ansible-navigator doc ansible.builtin.user -m stdout 
#THIS IS THE OUTPUT OF THE COMMAND ABOVE
{
> ANSIBLE.BUILTIN.USER    (/usr/local/lib/python3.8/site-packages/ansible/modules/user.py)

        Manage user accounts and user attributes. For Windows targets, use the [ansible.windows.win_user] module instead.

ADDED IN: version 0.2 of ansible-core

OPTIONS (= is mandatory):

- append
        If `yes', add the user to the groups specified in `groups'.
        If `no', user will only be added to the groups specified in `groups', removing them from all other groups.
        [Default: False]
        type: bool

- authorization
        Sets the authorization of the user.
        Does nothing when used with other platforms.
        Can set multiple authorizations using comma separation.
        To delete all authorizations, use `authorization='''.
        Currently supported on Illumos/Solaris.
        [Default: (null)]
        type: str
        added in: version 2.8 of ansible-core


- comment
        Optionally sets the description (aka `GECOS') of user account.
        [Default: (null)]
        type: str

- create_home
        Unless set to `no', a home directory will be made for the user when the account is created or if the home directory does not exist.
        Changed from `createhome' to `create_home' in Ansible 2.5.
        (Aliases: createhome)[Default: True]
        type: bool

} #ETC ETC, IT CONTINUES THE OUTPUT. 

If you want to see all the modules inside the EE: 

$ ansible-navigator doc -m stdout -l

⇣ default ⎈ [23:37:40]:root.vmi1537861:~# ansible-navigator doc -m stdout -l
[WARNING]: Collection redhatinsights.insights does not support Ansible version 2.13.4
add_host                                     Add a host (and alternatively a group) to the ansible-playbook in-memory inventory
ansible.posix.acl                            Set and retrieve file ACL information
ansible.posix.at                             Schedule the execution of a command or script file via the at command
ansible.posix.authorized_key                 Adds or removes an SSH authorized key
ansible.posix.firewalld                      Manage arbitrary ports/services with firewalld
ansible.posix.firewalld_info                 Gather information about firewalld
ansible.posix.mount                          Control active and configured mount points
ansible.posix.patch                          Apply patch files using the GNU patch tool
ansible.posix.seboolean                      Toggles SELinux booleans
ansible.posix.selinux                        Change policy and state of SELinux
ansible.posix.synchronize                    A wrapper around rsync to make common tasks in your playbooks quick and easy
ansible.posix.sysctl                         Manage entries in sysctl.conf
[...output omitted]

or you can reference a particular module with: 

$ ansible-navigator doc -m stdout -l ansible.posix.selinux  

Inside of my ansible.cfg we could have: 

cat ansible.cfg

[defaults]
inventory = ./my_inventory/
remote_user=devops  #the user that we are going to use to connect to the inventory hosts

IMPORTANT: it can be a best practice to disable the privilege exalation at the level
of the ansible.cfg and enable it just inside the playbook if it is needed:

e.g. (this is a playbook):

---
- name: Ensure webservers are installed 
  hosts: servera 
  become: true #this is were we enable the become root at playbook level

  tasks: 
    - name: Ensure that httpd is installed
      ansible.builtin.dnf:
        name: httpd 
        state: latest 

Tasks inside the yaml is implemented as dictionary with "-" sign for each task name. 
A dictionary can consist of key-value pairs or of other dictionaries. 


#SPIEGAZIONE CHATGPT: 

Mia domanda:

Quindi employees e skills sono chiavi, non sono liste loro stesse
ChatGPT said:
ChatGPT
Esattamente, hai ragione.

In questo YAML:

yaml
Copy code
employees:
  - name: Alice
    age: 25
    position: Data Analyst
    skills:
      - Python
      - Data Analysis
  - name: Bob
    age: 30
    position: Project Manager
    skills:
      - Project Management
      - Java
employees è una chiave che ha come valore una lista di elementi. Quindi employees non è una lista in sé, ma la chiave che punta a una lista di dizionari.

skills è anch'essa una chiave all'interno di ogni dizionario che rappresenta un impiegato. Ha come valore una lista di competenze (es. "Python" e "Data Analysis" per Alice). Quindi skills non è una lista di per sé, ma una chiave il cui valore è una lista.

Riassumendo:

employees è una chiave che punta a una lista di dizionari.
Ogni dizionario rappresenta un impiegato con diverse proprietà.
skills è una chiave all'interno di ciascun dizionario e il valore associato è una lista di competenze.
La distinzione tra chiavi e liste è importante perché le chiavi descrivono cosa rappresentano i valori, mentre i valori possono essere di vari tipi, come liste o altri dizionari.

COSA IMPORTANTE: una lista è un insieme valori o un dizionario che è un insieme di chiavi-valore 
employees:
  - name: Alice
    age: 25
    position: Data Analyst
  - name: Bob
    age: 30
    position: Project Manager
Qui, employees è una chiave che punta a una lista di dizionari. Ogni elemento della lista è un dizionario che rappresenta un impiegato con più chiavi e valori (name, age, position).
Una chiave di un dizionario, può avere due o più sotto chiavi-valore come nel seguente esempio: 

tasks:
  - name: Ensure httpd is installed
    ansible.builtin.dnf:
      name: httpd
      state: latest
  - name: Ensure webserver is enabled
    ansible.builtin.service:
      name: httpd
      state: started
      enabled: true


Però all'interno dei dizionarii ci sono dei sotto-dizionari?
ChatGPT said:
ChatGPT
Esatto, hai ragione! All'interno dei dizionari nella lista di tasks, ci sono effettivamente dei sotto-dizionari. Vediamo questo più in dettaglio usando l'esempio che hai fornito:

yaml
Copy code
tasks:
  - name: Ensure httpd is installed
    ansible.builtin.dnf:
      name: httpd
      state: latest
  - name: Ensure webserver is enabled
    ansible.builtin.service:
      name: httpd
      state: started
      enabled: true
Struttura Analizzata
tasks:

È una chiave che ha come valore una lista di dizionari.
Lista di dizionari (elementi della lista sotto tasks):

Ogni elemento della lista rappresenta un dizionario che descrive un compito specifico.
Sotto-dizionari:

Ogni dizionario contiene diverse chiavi:
name: Una chiave che descrive il nome del task.
ansible.builtin.dnf e ansible.builtin.service:
Queste sono chiavi che hanno come valore un sotto-dizionario.
Questi sotto-dizionari specificano i dettagli del modulo da usare. Ad esempio:
yaml
Copy code
ansible.builtin.dnf:
  name: httpd
  state: latest
Qui, ansible.builtin.dnf è una chiave il cui valore è un sotto-dizionario con ulteriori chiavi e valori, come name e state, che specificano i parametri per l'azione da eseguire.
Riepilogo
tasks è una chiave con una lista di dizionari.
Ogni dizionario nella lista rappresenta un compito (task).
Ogni compito può avere ulteriori dettagli rappresentati da sotto-dizionari.
In altre parole, la struttura è annidata: una lista di dizionari (i task), ognuno dei quali contiene sotto-dizionari per descrivere i dettagli di come quel task deve essere eseguito.

#continuazione lezione: 

tasks:
  - name: Ensure httpd is installed
    ansible.builtin.dnf:  #module to use
      name: httpd   #software to check
      state: latest #the version to have, if it is not present then install it

Let's take the following example: 

- name: Ensure stub content is deployed
  ansible.builtin.copy:
    content: >
      "Hello world,
      I am a web server"
    dest: /var/www/html/index.html

if you want to break a long line in multiple lines that will be reconstructed
as a single line you have to use the ">" sign like after the word "content" in the 
example before. 
If you want to preserve the multiple line that you have to use the pipe | sign 
after the "content:", like this, "content: | "

Since a playbook is a list of plays, one play can target one inventory host, and 
another play can target another inventory host. 

So the structure of a playbook is: 

- name: Name of the 1st play 
  hosts: [...] 
  tasks: 
    - name: task1 
    [...]
    - name: task2
    [...]
...
    - name: taskn 
    [...]
-name: Name of the 2nd play 
  hosts: [...] 
  tasks: 
    - name: task1 
    [...]
    - name: task2
    [...]
...
    - name: taskn 
    [...]