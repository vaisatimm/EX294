3.5 - Managing Facts

The module to use to gather facts is ansible.builin.setup: 

ansible localhost -m ansible.builtin.setup | less #this command is against the inventory colled localhost, 
so we are trying to gather facts about the host were we are inside. 

Example of playbook that recalls the ansible_facts variables:
---
- hosts: all
  tasks: 
  - name: Prints various Ansible facts
    ansible.builtin.debug: 
      msg: >
      The default IPv4 address of {{ ansible_facts.fqdn }}
      is {{ ansible_facts.default_ipv4.address }}

Now instead of ansible_* for the facts it's used ansible_facts_P

Currently, Ansible recognizes both the new fact-naming system

You might not be using any facts and want to speed up the play, or reduce load caused by the play on the managed hosts.

The managed hosts perhaps cannot run the ansible.builtin.setup module for some reason, or you need to install some prerequisite software before gathering facts.

---
- name: This play does not automatically gather any facts
  hosts: large_datacenter
  gather_facts: false #to disable the gathering 

Even if gather_facts: false is set for a play, you can manually gather facts at any time by running a task that uses the ansible.builtin.setup module:

  tasks: 
    - name: Manually gather facts 
      ansible.builtin.setup: 

Gathering a Subset of Facts

- name: Collect only hardware facts 
  ansible.builtin.setup: 
    gather_subset: 
      - hardware 

If you want to gather all facts except a certain subset

- name: Collect only harware facts 
  ansible.builtin.setup: 
    gather_subset: 
      - "!hardware" 


Creating Custom Facts

You can use custom facts to define certain values for managed hosts. Plays can use custom facts to populate configuration files or conditionally run tasks.
Custom facts are stored locally on each managed host.

By default, the ansible.builtin.setup module loads custom facts from files and scripts in the etc/ansible/facts.d directory of each managed host.

The following example static custom facts file is written in INI format. An INI-formatted custom facts file contains a top level defined by a section, followed by the key-value pairs of the facts to define:

[packages]
web_package = httpd
db_package = mariadb-server

[users]
user1 = joe
user2 = jane

The ansible.builtin.setup module stores custom facts in the ansible_facts['ansible_local'] variable. 
Facts are organized based on the name of the file that defined them. 
For example, assume that the /etc/ansible/facts.d/custom.fact file on the managed host produces the preceding custom facts. 
In that case, the value of ansible_facts['ansible_local']['custom']['users']['user1'] is joe.

You can inspect the structure of your custom facts by gathering facts and using the ansible.builtin.debug module to
 display the contents of the ansible_local variable with a play similar to the following example:

- name: Custom fact testing
  hosts: demo1.example.com
  gather_facts: true

  tasks:
    - name: Display all facts in ansible_local
      ansible.builtin.debug:
        var: ansible_local

Creating Variables from Other Variables

Sometimes you might want to create a new variable that uses the value of a different variable. 

You can use the ansible.builtin.set_fact module to create a new variable associated to the current host. 
For example, you might define the custom_host variable and use the ansible_facts['ansible_local']['custom'] variable as its value.

- name: Set custom_host
  ansible.builtin.set_fact:
    custom_host: "{{ ansible_facts['ansible_local']['custom'] }}"

By defining this new variable, your play can use the shorter custom_host['packages'] and custom_host['users'] 
variables rather than the longer ansible_facts['ansible_local']['custom']['packages'] and ansible_facts['ansible_local']['custom']['users'] variables.

Using Magic Variables

Ansible sets some special variables automatically.

These magic variables can also be useful to get information specific to a particular managed host.

Magic variable names are reserved, so you should not define variables with these names.

Four of the most useful magic variables are:

hostvars
Contains the variables for managed hosts, and can be used to get the values for another managed host's variables. It does not include the managed host's facts if they have not yet been gathered for that host.

group_names
Lists all groups that the current managed host is in.

groups
Lists all groups and hosts in the inventory.

inventory_hostname
Contains the hostname for the current managed host as configured in the inventory. This might be different from the hostname reported by facts for various reasons.

One way to get insight into their values is to use the ansible.builtin.debug module to display the contents of these variables.

For example, the following task causes every host that runs the play to print out a list of all network interfaces on the demo2.example.com host. This task works as long as facts were gathered for demo2 earlier in the play or by a preceding play in the playbook. It uses the hostvars magic variable to access the ansible_facts['interfaces'] fact for that host.

    - name: Print list of network interfaces for demo2
      ansible.builtin.debug:
        var: hostvars['demo2.example.com']['ansible_facts']['interfaces']
You can use the same approach with regular variables, not only facts. Keep in mind that the preceding task is run by every host in the play, so it would be more efficient to use a different module to apply information gathered from one host to the configuration of each of those other managed hosts.

Remember that you can use the ansible.builtin.setup module in a task to refresh gathered facts at any time. However, fact gathering does cause your playbook to take longer to run.